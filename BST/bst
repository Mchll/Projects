#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int data;
    int number;
    struct node *left;
    struct node *right;
    struct node *parent;
} node;

void create_BST(node *head) {
    head->data = -2147483647;
    head->number = 0;
    head->left = NULL;
    head->right = NULL;
    head->parent = NULL;
}

void clear_BST(node *head) {
    if(head->left != NULL) {
        clear_BST(head->left);
    }
    if(head->right != NULL) {
        clear_BST(head->right);
    }
    free(head);
}

void add_element(int data, node *head) {
    if(data == head->data) {
        head->number++;
    }
    else if(data > head->data) {
        if(head->right == NULL) {
            node *tmp = (node*) malloc(sizeof(node));
            if(tmp == NULL) {
                printf("ERROR\n");
            }
            head->right = tmp;
            tmp->left = NULL;
            tmp->right = NULL;
            tmp->data = data;
            tmp->number = 1;
            tmp->parent = head;
        }
        else {
            add_element(data, head->right);
        }
    }
    else {
        if(head->left == NULL) {
            node *tmp = (node*) malloc(sizeof(node));
            if(tmp == NULL) {
                printf("ERROR\n");
            }
            head->left = tmp;
            tmp->left = NULL;
            tmp->right = NULL;
            tmp->data = data;
            tmp->number = 1;
            tmp->parent = head;
        }
        else {
            add_element(data, head->left);
        }
    }
}

void delete_element(int data, node *head) {
    if(data > head->data) {
            if(head->right != NULL) {
                delete_element(data, head->right);
            }
    }
    else if(data < head->data) {
        if(head->left != NULL) {
                delete_element(data, head->left);
            }
    }
    else {
        if(head->left == NULL && head->right == NULL) {
            if((head->parent)->left == head) {
                (head->parent)->left = NULL;
            }
            else {
                (head->parent)->right = NULL;
            }
            free(head);
        }
        else if(head->left == NULL) {
            if((head->parent)->left == head) {
                (head->parent)->left = head->right;
            }
            else {
                (head->parent)->right = head->right;
            }
            free(head);
        }
        else if(head->right == NULL) {
            if((head->parent)->left == head) {
                (head->parent)->left = head->left;
            }
            else {
                (head->parent)->right = head->left;
            }
            free(head);
        }
        else {
            node *tmp = (node*) malloc(sizeof(node));
            if(tmp == NULL) {
                printf("ERROR\n");
            }
            tmp = head->right;
            while(tmp->left != NULL) {
                tmp = tmp->left;
            }
            head->data = tmp->data;
            head->number = tmp->number;
            delete_element(tmp->data, tmp);
        }
    }
}

int check_data(int data, node *head) {
    while(1) {
        if(head->data == data) {
            return 1;
        }
        if((data > head->data && head->right == NULL) || (data < head->data && head->left == NULL)) {
            return 0;
        }
        if(data > head->data) {
            head = head->right;
        }
        else {
            head = head->left;
        }
    }
}

void print_increasing(node *head) {
    if(head->left != NULL) {
        print_increasing(head->left);
    }
    if(head->data != -2147483647) {
        printf("%d ", head->data);
    }
    if(head->right != NULL) {
        print_increasing(head->right);
    }
}

void print_decreasing(node *head) {
    if(head->right != NULL) {
        print_decreasing(head->right);
    }
    if(head->data != -2147483647) {
        printf("%d ", head->data);
    }
    if(head->left != NULL) {
        print_decreasing(head->left);
    }
}

void print_BST(node *head) {
    if(head->data != -2147483647) {
        printf("(%d ", head->data);
        if(head->left == NULL) {
            printf("null");
        }
        else {
            print_BST(head->left);
        }
        printf(" ");
        if(head->right == NULL) {
            printf("null)");
        }
        else {
            print_BST(head->right);
            printf(")");
        }
    }
    else {
        print_BST(head->right);
    }
}

int main()
{
    node *head = (node*) malloc(sizeof(node));
    if(head == NULL) {
        printf("ERROR\n");
    }
    create_BST(head);



    clear_BST(head);
    return 0;
}
