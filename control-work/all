#include <stdio.h>
#include <stdlib.h>
#define MAXLENGTH 1000
#define MAXN 123400

int mystrlen(char *str) {
    int i = 0;
    while(str[i]) {
        i++;
    }
    return i;
}

int strcmp(char *s1, char *s2) {
    int i = 0;
    while(1) {
        if(s1[i] == '\0' && s2[i] == '\0') {
            return 0;
        }
        if(s1[i] == '\0') {
            return -1;
        }
        if(s2[i] == '\0') {
            return 1;
        }
        if(s1[i] > s2[i]) {
            return 1;
        }
        if(s1[i] < s2[i]) {
            return -1;
        }
        i++;
    }
}

void strcpy(char *dst, char *src) {
    int i = 0;
    while(1) {
        src[i] = dst[i];
        if(dst[i] == '\0') {
            break;
        }
        i++;
    }
}

void strcat (char *dst, char *src) {
    int dst_length = mystrlen(dst);
    int src_length = mystrlen(src);
    int i;
    for(i = dst_length; i <= dst_length + src_length; ++i) {
        dst[i] = src[i - dst_length];
    }
}

typedef struct node {
    char str[MAXLENGTH];
    int data;
    struct node *next;
} node;

void initialize_hash_table(node **hash_table) {
    int i = 0;
    for(i = 0; i < MAXN; ++i) {
        hash_table[i] = NULL;
    }
}

int hash_code(char *s) {
    int i = 0, j = 1, code_symbol = 1, code = 0;
    int s_length = mystrlen(s);
    for(i = 0; i < s_length; ++i) {
        j = (j * 31) % MAXN;
        code_symbol = ((int)(s[i]) * j) % MAXN;
        code = (code + code_symbol) % MAXN;
    }
    return code;
}

void set_into_table (char *s, node **hash_table) {
    int code_s = 0, ans = 0;
    code_s = hash_code(s);
    node *tmp = (node *) malloc(sizeof(node));
    if(tmp == NULL) {
        printf("ERROR\n");
    }
    if(hash_table[code_s] == NULL) {
        tmp->data = 1;
        tmp->next = NULL;
        strcpy(s, tmp->str);
        hash_table[code_s] = tmp;
    }
    else {
        tmp = hash_table[code_s];
        while(1) {
            ans = strcmp(s, tmp->str);
            if(ans == 0) {
                tmp->data++;
                break;
            }
            else {
                if(tmp->next != NULL) {
                    tmp = tmp->next;
                }
                else {
                    node *last = (node *) malloc(sizeof(node));
                    if(last == NULL) {
                        printf("ERROR\n");
                    }
                    last->data = 1;
                    last->next = NULL;
                    strcpy(s, last->str);
                    break;
                }
            }
        }
    }
}

void print_table(node **hash_table) {
    int i = 0, j = 0, n = 0;
    node *tmp = (node *) malloc(sizeof(node));
    if(tmp == NULL) {
        printf("ERROR\n");
    }
    for(i = 0; i < MAXN; ++i) {
        tmp = hash_table[i];
        while(tmp != NULL) {
            printf("%d ", tmp->data);
            n = mystrlen(tmp->str);
            for(j = 0; j < n; ++j) {
                printf("%c", tmp->str[j]);
            }
            printf("\n");
            tmp = tmp->next;
        }
    }
}

void count_strings(node **hash_table) {
    int n = 0, i = 0;
    char *s = (char *) malloc(sizeof(char) * MAXLENGTH);
    if(s == NULL) {
        printf("ERROR\n");
    }
    scanf("%d", &n);
    gets(s);
    for(i = 0; i < n; ++i) {
        gets(s);
        set_into_table(s, hash_table);
    }
    print_table(hash_table);
}

void clear_hash_table(node **hash_table) {
    int i = 0;
    node *tmp = (node *) malloc(sizeof(node));
    if(tmp == NULL) {
        printf("ERROR\n");
    }
    node *tmpnext = (node *) malloc(sizeof(node));
    if(tmpnext == NULL) {
        printf("ERROR\n");
    }
    for(i = 0; i < MAXN; ++i) {
        tmp = hash_table[i];
        while(tmp != NULL) {
            tmpnext = tmp->next;
            free(tmp);
            tmp = tmpnext;
        }
    }
    free(hash_table);
}

void one_another() {
    int i = 0, n = 0, s_length = 0, j = 0;
    int *a = (int *) malloc(sizeof(int) * MAXLENGTH);
    if(a == NULL) {
        printf("ERROR\n");
    }
    char *s = (char *) malloc(sizeof(char) * MAXLENGTH);
    if(s == NULL) {
        printf("ERROR\n");
    }
    for(i = 0; i < MAXLENGTH; ++i) {
        a[i] = 0;
    }
    scanf("%d", &n);
    gets(s);
    for(i = 0; i < n * 2 + 1; ++i) {
        gets(s);
        s_length = mystrlen(s);
        for(j = 0; j < s_length; ++j) {
            a[j] = a[j] ^ (int)(s[j]);
        }
    }
    i = 0;
    while(a[i] != 0) {
        printf("%c", (char)(a[i]));
        ++i;
    }
    printf("\n");
}

int main()
{
    node **hash_table = (node **) malloc(sizeof(node) * MAXN);
    if(hash_table == NULL) {
        printf("ERROR\n");
    }
    initialize_hash_table(hash_table);

    count_strings(hash_table);

    clear_hash_table(hash_table);
    return 0;
}
