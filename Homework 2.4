def roots(arr : Array[Double]) : List[Double] = {
  def sq(s : Double) : Double = s * s
  def cube(c : Double) : Double = c * c * c
  def quadratic_equation(arr : Array[Double]) : List[Double] = {
    val a = arr(1)
    val b = arr(2)
    val c = arr(3)
    val d = sq(b) - 4 * a * c
    if(d < 0) {
      Nil
    }
    else {
      if (d == 0) {
        val x = (-b) / (2 * a)
        x :: Nil
      }
      else {
        val x1 = ((-b) + math.sqrt(d)) / (2 * a)
        val x2 = ((-b) - math.sqrt(d)) / (2 * a)
        x1 :: x2 :: Nil
      }
    }
  }
  def cubic_equation(arr : Array[Double]) : List[Double] = {
    val pi = 3.14159265358979323846
    val a = arr(1)
    val b = arr(2) / a
    val c = arr(3) / a
    val d = arr(4) / a
    val Q = (sq(b) - 3 * c) / 9
    val R = (2 * cube(b) - 9 * b * c + 27 * d) / 54
    val S = cube(Q) - sq(R)
    if (S > 0) {
      val p = (math.acos(R / (math.sqrt(cube(Q))))) / 3
      val x1 = -2 * math.sqrt(Q) * math.cos(p) - b / 3
      val x2 = -2 * math.sqrt(Q) * math.cos(p + 2 * pi / 3) - b / 3
      val x3 = -2 * math.sqrt(Q) * math.cos(p - 2 * pi / 3) - b / 3
      x1 :: x2 :: x3 :: Nil
    }
    else {
      val A = -math.signum(R) * math.pow(math.abs(R) + math.sqrt(-S), 1 / 3)
      var B = 0.0
      if (A == 0) {
        B = 0
      }
      else {
        B = Q / A
      }
      val x1 = (A + B) - b / 3
      if(A == B) {
        val x2 = -A - a / 3
        x1 :: x2 :: Nil
      }
      else {
        x1 :: Nil
      }
    }
  }
  if (arr(0) == 2) {
    quadratic_equation(arr)
  }
  else if (arr(0) == 3) {
    cubic_equation(arr)
  }
  else {
    Nil
  }
}
